generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  active
  closed
}

model Product {
  id                Int           @id @default(autoincrement())
  codeName          String
  category          String
  name              String
  capacityAvailable String[]
  capacity          String
  priceRegular      Float
  priceDiscount     Float
  colorsAvailable   String[]
  color             String
  images            String[]
  image             String
  description       Description[]
  screen            String
  resolution        String
  processor         String
  ram               String
  camera            String?
  zoom              String?
  cell              String[]
  year              Int
  Order             OrderItem[]
  favorites         Favorite[]

  @@map("products")
}

model Description {
  id        Int      @id @default(autoincrement())
  productId Int
  language  String
  title     String
  text      String[]

  product Product @relation(fields: [productId], references: [id])

  @@map("descriptions")
}

model User {
  id           String     @id @default(uuid()) @db.VarChar(36)
  name         String     @db.VarChar(100)
  email        String     @unique @db.VarChar(100)
  password     String
  profilePhoto String
  levelProfile String
  totalSpend   Float
  orders       Order[]
  favorites    Favorite[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("users")
}

model Order {
  id        String      @id @default(uuid()) @db.VarChar(36)
  status    OrderStatus
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  orderItems OrderItem[]

  user User @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id         String @id @default(uuid()) @db.VarChar(36)
  orderId    String
  productId  Int
  quantity   Int
  totalPrice Float  @map("total_price")

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Favorite {
  id        Int    @id @default(autoincrement())
  userId    String
  productId Int

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("favorites")
}
